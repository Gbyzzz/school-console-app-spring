package ua.foxminded.pinchuk.javaspring.schoolconsoleappspring.dao.impl;

import org.springframework.jdbc.core.BatchPreparedStatementSetter;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;
import ua.foxminded.pinchuk.javaspring.schoolconsoleappspring.bean.Student;
import ua.foxminded.pinchuk.javaspring.schoolconsoleappspring.dao.CourseDAO;
import ua.foxminded.pinchuk.javaspring.schoolconsoleappspring.bean.Course;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

@Repository
public class CourseDAOImpl implements CourseDAO {

    private static final String SQL_CHECK_IF_TABLE_EXISTS = "" +
            "SELECT EXISTS (" +
            "   SELECT FROM information_schema.tables " +
            "   WHERE  table_schema = 'public'" +
            "   AND    table_name   = 'courses'" +
            "   );";

    private static final String SQL_CREATE_TABLE = "" +
            "CREATE TABLE courses (" +
            "    course_id          bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
            "    course_name        varchar(20) NOT NULL," +
            "    course_description varchar(100) NOT NULL" +
            ");" +
            "CREATE TABLE courses_students (" +
            "    course_id  bigint NOT NULL REFERENCES courses (course_id)," +
            "    student_id bigint NOT NULL REFERENCES students (student_id) ON DELETE CASCADE," +
            "    UNIQUE (course_id, student_id)" +
            ");";

    private static final String SQL_SAVE_ALL = "" +
            "INSERT INTO courses " +
            "VALUES (?, ?, ?);";

    private static final String SQL_GET_ALL_COURSES = "" +
            "SELECT * " +
            "FROM courses";
    private static final String SQL_GET_COURSE_BY_STUDENT = "" +
            "SELECT c.course_id, " +
            "       c.course_name, " +
            "       c.course_description " +
            "FROM courses_students cs " +
            "JOIN courses c ON cs.course_id=c.course_id " +
            "WHERE cs.student_id=?";
    private static final String SQL_ADD_STUDENT_TO_COURSE = "" +
            "INSERT INTO courses_students (student_id, course_id) " +
            "values (?, ?) " +
            "ON CONFLICT DO NOTHING";

    private static final String SQL_REMOVE_STUDENT_FROM_COURSE = "" +
            "DELETE FROM courses_students " +
            "WHERE student_id=? " +
            "AND course_id=?";
    private final JdbcTemplate jdbcTemplate;
    private final RowMapper<Course> courseRowMapper;

    public CourseDAOImpl(JdbcTemplate jdbcTemplate, RowMapper<Course> courseRowMapper) {
        this.jdbcTemplate = jdbcTemplate;
        this.courseRowMapper = courseRowMapper;
    }


    @Override
    public boolean checkIfTableExists() {
        return jdbcTemplate.queryForObject(SQL_CHECK_IF_TABLE_EXISTS, Boolean.class);
    }

    @Override
    public void createTable() {
        jdbcTemplate.update(SQL_CREATE_TABLE);
    }

    @Override
    public void saveAll(List<Course> courses) {
        jdbcTemplate.batchUpdate(SQL_SAVE_ALL, new BatchPreparedStatementSetter() {

            @Override
            public void setValues(PreparedStatement ps, int i) throws SQLException {
                Course course = courses.get(i);
                ps.setInt(1, course.getCourseId());
                ps.setInt(2, course.getCourseId());
            }
            @Override
            public int getBatchSize() {
                return courses.size();
            }
        });
    }

    @Override
    public void saveAllStudentsToCourses(List<Course> courses) {

        List<Integer[]> listOfId = new ArrayList<>();

        for(Course course : courses) {
            for(Student student : course.getStudents()) {
                listOfId.add(new Integer[]{course.getCourseId(), student.getStudentId()});
            }
        }
        jdbcTemplate.batchUpdate(SQL_ADD_STUDENT_TO_COURSE, new BatchPreparedStatementSetter() {

            @Override
            public void setValues(PreparedStatement ps, int i) throws SQLException {
                Integer[] courseStudentIds = listOfId.get(i);
                ps.setInt(1, courseStudentIds[0]);
                ps.setInt(2, courseStudentIds[1]);
            }
            @Override
            public int getBatchSize() {
                return listOfId.size();
            }
        });
    }

    @Override
    public List<Course> getAllCourses() {
        return jdbcTemplate.query(SQL_GET_ALL_COURSES, courseRowMapper);
    }

    @Override
    public List<Course> getCoursesByStudentId(int studentId) {
        return jdbcTemplate.query(SQL_GET_COURSE_BY_STUDENT, courseRowMapper, studentId);
    }

    @Override
    public void addStudentToCourse(int studentId, int courseId) {
        jdbcTemplate.update(SQL_ADD_STUDENT_TO_COURSE, studentId, courseId);
    }
    @Override
    public void removeStudentFromCourse(int studentId, int courseId) {
    jdbcTemplate.update(SQL_REMOVE_STUDENT_FROM_COURSE, studentId, courseId);
    }

}
