package ua.foxminded.pinchuk.javaspring.schoolconsoleappspring.dao.impl;

import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.BatchPreparedStatementSetter;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;
import ua.foxminded.pinchuk.javaspring.schoolconsoleappspring.dao.GroupDAO;
import ua.foxminded.pinchuk.javaspring.schoolconsoleappspring.bean.Group;


import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.*;

@Repository
public class GroupDAOImpl implements GroupDAO {

    private static final String SQL_CHECK_IF_TABLE_EXISTS = "" +
            "SELECT EXISTS (" +
            "   SELECT FROM information_schema.tables " +
            "   WHERE  table_schema = 'public'" +
            "   AND    table_name   = 'groups'" +
            "   );";

    private static final String SQL_CREATE_TABLE = "" +
            "CREATE TABLE groups (" +
            "    group_id   bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
            "    group_name varchar(20) NOT NULL" +
            "" +
            ");";

    private static final String SQL_SAVE_ALL = "" +
            "INSERT INTO groups " +
            "VALUES (?, ?);";

    private static final String SQL_GET_ALL_GROUPS = "" +
            "SELECT * " +
            "FROM groups";
    private static final String SQL_GET_GROUP_BY_ID = "" +
            "SELECT group_id, " +
            "       group_name " +
            "FROM groups " +
            "WHERE group_id=?";

    private static final String SQL_GET_GROUPS_BY_NUMBER_OF_STUDENTS = "" +
            "SELECT g.group_id, " +
            "       g.group_name, " +
            "COUNT(s.group_id) AS total_students " +
            "FROM groups g " +
            "LEFT OUTER JOIN students s ON s.group_id=g.group_id " +
            "GROUP BY g.group_id " +
            "HAVING COUNT(s.group_id)<=? " +
            "ORDER BY total_students ASC";

    private final JdbcTemplate jdbcTemplate;
    private final RowMapper<Group> groupRowMapper;

    public GroupDAOImpl(JdbcTemplate jdbcTemplate, RowMapper<Group> groupRowMapper) {
        this.jdbcTemplate = jdbcTemplate;
        this.groupRowMapper = groupRowMapper;

    }


    @Override
    public boolean checkIfTableExists() {
        return jdbcTemplate.queryForObject(SQL_CHECK_IF_TABLE_EXISTS, Boolean.class);
    }

    @Override
    public void createTable() {
        jdbcTemplate.update(SQL_CREATE_TABLE);
    }

    @Override
    public void saveAll(List<Group> groups) {
        jdbcTemplate.batchUpdate(SQL_SAVE_ALL, new BatchPreparedStatementSetter() {

            @Override
            public void setValues(PreparedStatement ps, int i) throws SQLException {
                Group group = groups.get(i);
                ps.setInt(1, group.getGroupId());
                ps.setString(2, group.getGroupName());
            }
            @Override
            public int getBatchSize() {
                return groups.size();
            }
        });
    }

    @Override
    public List<Group> getAllGroups() {
        return jdbcTemplate.query(SQL_GET_ALL_GROUPS, groupRowMapper);
    }

    @Override
    public Optional<Group> getGroupById(int id) {
        try {
            return Optional.of(jdbcTemplate
                    .queryForObject(SQL_GET_GROUP_BY_ID, groupRowMapper, id));
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

    @Override
    public Map<Group, Integer> getGroupsByNumberOfStudents(int students) {
        return jdbcTemplate.query(SQL_GET_GROUPS_BY_NUMBER_OF_STUDENTS,
                preparedStatement -> preparedStatement.setInt(1, students),
                rs -> {
                    Map<Group, Integer> res = new HashMap<>();
                    while (rs.next()) {
                        res.put(groupRowMapper.mapRow(rs, 0), rs.getInt("total_students"));
                    }
                    return res;
                });
    }
}
